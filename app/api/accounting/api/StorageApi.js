/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var variables_1 = require("../variables");
require("rxjs/Rx");
/* tslint:disable:no-unused-variable member-ordering */
var StorageApi = (function () {
    function StorageApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     * 删除
     *
     * @param id
     */
    StorageApi.prototype.storageDelete = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/storage/${Id}'
            .replace('${' + 'Id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
                'when calling storageDelete.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 下载
     *
     * @param attachmentId
     */
    StorageApi.prototype.storageGet = function (attachmentId, extraHttpRequestParams) {
        var path = this.basePath + '/api/Storage';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined' +
                'when calling storageGet.');
        }
        if (attachmentId !== undefined) {
            queryParameters.set('AttachmentId', String(attachmentId));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 上传
     *
     */
    StorageApi.prototype.storagePost = function (extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/storage/upload';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        var requestOptions = {
            method: http_1.RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 列出bucket中一个文件夹中的 items
     *
     * @param modelId attachment Id
     * @param modelCompanyId companyId
     * @param modelUserId User Id
     * @param modelPath 上传文件的路径
     * @param modelFileName 上传文件的名称
     * @param modelUrl 下载item 的url
     * @param modelAttachmentType 附件类型
     * @param modelOriginName 名称
     * @param modelEntityTypeCode 实体类型
     */
    StorageApi.prototype.storageSearch = function (modelId, modelCompanyId, modelUserId, modelPath, modelFileName, modelUrl, modelAttachmentType, modelOriginName, modelEntityTypeCode, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/storage/search';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (modelId !== undefined) {
            queryParameters.set('model.id', String(modelId));
        }
        if (modelCompanyId !== undefined) {
            queryParameters.set('model.companyId', String(modelCompanyId));
        }
        if (modelUserId !== undefined) {
            queryParameters.set('model.userId', String(modelUserId));
        }
        if (modelPath !== undefined) {
            queryParameters.set('model.path', String(modelPath));
        }
        if (modelFileName !== undefined) {
            queryParameters.set('model.fileName', String(modelFileName));
        }
        if (modelUrl !== undefined) {
            queryParameters.set('model.url', String(modelUrl));
        }
        if (modelAttachmentType !== undefined) {
            queryParameters.set('model.attachmentType', String(modelAttachmentType));
        }
        if (modelOriginName !== undefined) {
            queryParameters.set('model.originName', String(modelOriginName));
        }
        if (modelEntityTypeCode !== undefined) {
            queryParameters.set('model.entityTypeCode', String(modelEntityTypeCode));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    return StorageApi;
}());
StorageApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.ACCOUNTING_BASE_PATH)),
    __metadata("design:paramtypes", [http_1.Http, String])
], StorageApi);
exports.StorageApi = StorageApi;
//# sourceMappingURL=data:application/json;base64,