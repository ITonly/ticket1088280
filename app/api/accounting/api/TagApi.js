/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var variables_1 = require("../variables");
require("rxjs/Rx");
/* tslint:disable:no-unused-variable member-ordering */
var TagApi = (function () {
    function TagApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     * 获取所有标签
     *
     * @param start 从第几个开始
     * @param size 取几个
     * @param lastRequest 是否取剩下所有的
     */
    TagApi.prototype.tagSearch = function (start, size, lastRequest, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/tag/search';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }
        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }
        if (lastRequest !== undefined) {
            queryParameters.set('LastRequest', String(lastRequest));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    return TagApi;
}());
TagApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.ACCOUNTING_BASE_PATH)),
    __metadata("design:paramtypes", [http_1.Http, String])
], TagApi);
exports.TagApi = TagApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFnQXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGFnQXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkc7QUFFSCxzQ0FDdUM7QUFDdkMsc0NBQThEO0FBRzlELDBDQUE0RjtBQUM1RixtQkFBaUI7QUFFakIsdURBQXVEO0FBSXZELElBQWEsTUFBTTtJQUlmLGdCQUFzQixJQUFVLEVBQTJDLFFBQWdCO1FBQXJFLFNBQUksR0FBSixJQUFJLENBQU07UUFIdEIsYUFBUSxHQUFHLG1FQUFtRSxDQUFDO1FBQ2xGLG1CQUFjLEdBQVksSUFBSSxjQUFPLEVBQUUsQ0FBQztRQUczQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDN0IsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSwwQkFBUyxHQUFoQixVQUFrQixLQUFjLEVBQzlCLElBQWEsRUFDYixXQUFxQixFQUNyQixzQkFBNEI7UUFDMUIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQztRQUVsRCxJQUFJLGVBQWUsR0FBRyxJQUFJLHNCQUFlLEVBQUUsQ0FBQztRQUM1QyxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLGVBQWUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNyQixlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsZUFBZSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUVELElBQUksY0FBYyxHQUF1QjtZQUNyQyxNQUFNLEVBQUUsb0JBQWEsQ0FBQyxHQUFHO1lBQ3pCLE9BQU8sRUFBRSxZQUFZO1lBQ3JCLE1BQU0sRUFBRSxlQUFlO1NBQzFCLENBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQzthQUN6QyxHQUFHLENBQUMsVUFBQyxRQUFrQjtZQUNwQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDckIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVMLGFBQUM7QUFBRCxDQUFDLEFBckRELElBcURDO0FBckRZLE1BQU07SUFEbEIsaUJBQVUsRUFBRTtJQUswQixXQUFBLGVBQVEsRUFBRSxDQUFBLEVBQUMsV0FBQSxhQUFNLENBQUMsZ0NBQW9CLENBQUMsQ0FBQTtxQ0FBOUMsV0FBSTtHQUp2QixNQUFNLENBcURsQjtBQXJEWSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR3VhblBsdXMuQWNjb3VudGluZy5XZWJBcGlcbiAqXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogdjFcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgdGhlIHN3YWdnZXIgY29kZSBnZW5lcmF0b3IgcHJvZ3JhbS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4uZ2l0XG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVxdWVzdE9wdGlvbnNBcmdzLCBSZXNwb25zZSwgVVJMU2VhcmNoUGFyYW1zLFxuICBSZXF1ZXN0TWV0aG9kIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gIGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgKiBhcyBtb2RlbHMgZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEFDQ09VTlRJTkdfQkFTRV9QQVRIIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL3ZhcmlhYmxlcyc7XG5pbXBvcnQgJ3J4anMvUngnO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgbWVtYmVyLW9yZGVyaW5nICovXG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRhZ0FwaSB7XG4gICAgcHJvdGVjdGVkIGJhc2VQYXRoID0gJ2h0dHA6Ly9ndWFucGx1cy1hcGktYWNjb3VudGluZy1kZXYuY24tbm9ydGgtMS5lYi5hbWF6b25hd3MuY29tLmNuJztcbiAgICBwdWJsaWMgZGVmYXVsdEhlYWRlcnM6IEhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEh0dHAsIEBPcHRpb25hbCgpQEluamVjdChBQ0NPVU5USU5HX0JBU0VfUEFUSCkgYmFzZVBhdGg6IHN0cmluZykge1xuICAgICAgICBpZiAoYmFzZVBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZVBhdGggPSBiYXNlUGF0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluaJgOacieagh+etvlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzdGFydCDku47nrKzlh6DkuKrlvIDlp4tcbiAgICAgKiBAcGFyYW0gc2l6ZSDlj5blh6DkuKpcbiAgICAgKiBAcGFyYW0gbGFzdFJlcXVlc3Qg5piv5ZCm5Y+W5Ymp5LiL5omA5pyJ55qEXG4gICAgICovXG4gICAgcHVibGljIHRhZ1NlYXJjaCAoc3RhcnQ/OiBudW1iZXIsXG4gICAgICBzaXplPzogbnVtYmVyLFxuICAgICAgbGFzdFJlcXVlc3Q/OiBib29sZWFuLFxuICAgICAgZXh0cmFIdHRwUmVxdWVzdFBhcmFtcz86IGFueSApOiBPYnNlcnZhYmxlPEFycmF5PG1vZGVscy5UYWdNb2RlbD4+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYmFzZVBhdGggKyAnL2FwaS92MS90YWcvc2VhcmNoJztcblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICBsZXQgaGVhZGVyUGFyYW1zID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3N0YXJ0JywgU3RyaW5nKHN0YXJ0KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMuc2V0KCdzaXplJywgU3RyaW5nKHNpemUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0UmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMuc2V0KCdMYXN0UmVxdWVzdCcsIFN0cmluZyhsYXN0UmVxdWVzdCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlcXVlc3RPcHRpb25zOiBSZXF1ZXN0T3B0aW9uc0FyZ3MgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IFJlcXVlc3RNZXRob2QuR2V0LFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyUGFyYW1zLFxuICAgICAgICAgICAgc2VhcmNoOiBxdWVyeVBhcmFtZXRlcnNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3QocGF0aCwgcmVxdWVzdE9wdGlvbnMpXG4gICAgICAgICAgICAubWFwKChyZXNwb25zZTogUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxufVxuIl19