/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams,
  RequestMethod } from '@angular/http';
import { Injectable, Inject, Optional }  from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import { ACCOUNTING_BASE_PATH }                                         from '../variables';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class StorageApi {
    protected basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional()@Inject(ACCOUNTING_BASE_PATH) basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 删除
     * 
     * @param id 
     */
    public storageDelete (id: string,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/v1/storage/${Id}'
            .replace('${' + 'Id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
              'when calling storageDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 下载
     * 
     * @param attachmentId 
     */
    public storageGet (attachmentId: string,
      extraHttpRequestParams?: any ): Observable<models.BoolResultModel> {
        const path = this.basePath + '/api/Storage';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined' +
              'when calling storageGet.');
        }
        if (attachmentId !== undefined) {
            queryParameters.set('AttachmentId', String(attachmentId));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 上传
     * 
     */
    public storagePost (extraHttpRequestParams?: any ): Observable<models.AttachmentModel> {
        const path = this.basePath + '/api/v1/storage/upload';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 列出bucket中一个文件夹中的 items
     * 
     * @param modelId attachment Id
     * @param modelCompanyId companyId
     * @param modelUserId User Id
     * @param modelPath 上传文件的路径
     * @param modelFileName 上传文件的名称
     * @param modelUrl 下载item 的url
     * @param modelAttachmentType 附件类型
     * @param modelOriginName 名称
     * @param modelEntityTypeCode 实体类型
     */
    public storageSearch (modelId?: string,
      modelCompanyId?: string,
      modelUserId?: string,
      modelPath?: string,
      modelFileName?: string,
      modelUrl?: string,
      modelAttachmentType?: string,
      modelOriginName?: string,
      modelEntityTypeCode?: string,
      extraHttpRequestParams?: any ): Observable<Object> {
        const path = this.basePath + '/api/v1/storage/search';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (modelId !== undefined) {
            queryParameters.set('model.id', String(modelId));
        }

        if (modelCompanyId !== undefined) {
            queryParameters.set('model.companyId', String(modelCompanyId));
        }

        if (modelUserId !== undefined) {
            queryParameters.set('model.userId', String(modelUserId));
        }

        if (modelPath !== undefined) {
            queryParameters.set('model.path', String(modelPath));
        }

        if (modelFileName !== undefined) {
            queryParameters.set('model.fileName', String(modelFileName));
        }

        if (modelUrl !== undefined) {
            queryParameters.set('model.url', String(modelUrl));
        }

        if (modelAttachmentType !== undefined) {
            queryParameters.set('model.attachmentType', String(modelAttachmentType));
        }

        if (modelOriginName !== undefined) {
            queryParameters.set('model.originName', String(modelOriginName));
        }

        if (modelEntityTypeCode !== undefined) {
            queryParameters.set('model.entityTypeCode', String(modelEntityTypeCode));
        }

        let requestOptions: RequestOptionsArgs = {
            method: RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
