/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var variables_1 = require("../variables");
require("rxjs/Rx");
/* tslint:disable:no-unused-variable member-ordering */
var AccountTransactionApi = (function () {
    function AccountTransactionApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     * 根据id 删除交易记录
     *
     * @param id
     */
    AccountTransactionApi.prototype.accountTransactionDelete = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
                'when calling accountTransactionDelete.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 根据id获取交易记录
     *
     * @param id
     */
    AccountTransactionApi.prototype.accountTransactionGet = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
                'when calling accountTransactionGet.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 上传流水帐附件
     *
     * @param accountTransactionId
     */
    AccountTransactionApi.prototype.accountTransactionMobileUpload = function (accountTransactionId, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/mobile/upload/${accountTransactionId}'
            .replace('${' + 'accountTransactionId' + '}', String(accountTransactionId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'accountTransactionId' is not null or undefined
        if (accountTransactionId === null || accountTransactionId === undefined) {
            throw new Error('Required parameter accountTransactionId was null or undefined' +
                'when calling accountTransactionMobileUpload.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 新增交易记录
     *
     * @param accountTransactionModel
     */
    AccountTransactionApi.prototype.accountTransactionPost = function (accountTransactionModel, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'accountTransactionModel' is not null or undefined
        if (accountTransactionModel === null || accountTransactionModel === undefined) {
            throw new Error('Required parameter accountTransactionModel was null or undefined' +
                'when calling accountTransactionPost.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(accountTransactionModel);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 修改交易记录
     *
     * @param accountTransactionModel
     */
    AccountTransactionApi.prototype.accountTransactionPut = function (accountTransactionModel, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'accountTransactionModel' is not null or undefined
        if (accountTransactionModel === null || accountTransactionModel === undefined) {
            throw new Error('Required parameter accountTransactionModel was null or undefined' +
                'when calling accountTransactionPut.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(accountTransactionModel);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 根据id撤销收支记录
     *
     * @param accountTransactionIds 收支记录id集合
     */
    AccountTransactionApi.prototype.accountTransactionRevoke = function (accountTransactionIds, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/revoke';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'accountTransactionIds' is not null or undefined
        if (accountTransactionIds === null || accountTransactionIds === undefined) {
            throw new Error('Required parameter accountTransactionIds was null or undefined' +
                'when calling accountTransactionRevoke.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(accountTransactionIds);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 分页获取交易记录
     *
     * @param bankaccountid 银行账户Id
     * @param accountTransactionType 交易类型：0、全部；1、收入；2、支出
     * @param keyword 关键字
     * @param money 金额
     * @param startDate 开始时间
     * @param endDate 结束时间
     * @param includeChildren 是否带子项Y/N
     * @param statementStatus 对账状态：0或者空字符串&#x3D;全部；1&#x3D;未对账；2&#x3D;已经对账
     * @param matchMoney 匹配金额
     * @param pageIndex 页数索引
     * @param pageSize 页数大小
     */
    AccountTransactionApi.prototype.accountTransactionSearch = function (bankaccountid, accountTransactionType, keyword, money, startDate, endDate, includeChildren, statementStatus, matchMoney, pageIndex, pageSize, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/search/${bankaccountid}'
            .replace('${' + 'bankaccountid' + '}', String(bankaccountid));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'bankaccountid' is not null or undefined
        if (bankaccountid === null || bankaccountid === undefined) {
            throw new Error('Required parameter bankaccountid was null or undefined' +
                'when calling accountTransactionSearch.');
        }
        if (accountTransactionType !== undefined) {
            queryParameters.set('accountTransactionType', String(accountTransactionType));
        }
        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }
        if (money !== undefined) {
            queryParameters.set('money', String(money));
        }
        if (startDate !== undefined) {
            queryParameters.set('startDate', String(startDate));
        }
        if (endDate !== undefined) {
            queryParameters.set('endDate', String(endDate));
        }
        if (includeChildren !== undefined) {
            queryParameters.set('includeChildren', String(includeChildren));
        }
        if (statementStatus !== undefined) {
            queryParameters.set('statementStatus', String(statementStatus));
        }
        if (matchMoney !== undefined) {
            queryParameters.set('matchMoney', String(matchMoney));
        }
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 上传流水帐附件
     *
     * @param accountTransactionId
     */
    AccountTransactionApi.prototype.accountTransactionUpload = function (accountTransactionId, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/upload/${accountTransactionId}'
            .replace('${' + 'accountTransactionId' + '}', String(accountTransactionId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'accountTransactionId' is not null or undefined
        if (accountTransactionId === null || accountTransactionId === undefined) {
            throw new Error('Required parameter accountTransactionId was null or undefined' +
                'when calling accountTransactionUpload.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 获取水印
     *
     * @param attachmentId 附件id
     * @param accountTransactionId 交易记录id
     */
    AccountTransactionApi.prototype.accountTransactionWaterMark = function (attachmentId, accountTransactionId, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction/${attachmentId}/${accountTransactionId}/watermark'
            .replace('${' + 'attachmentId' + '}', String(attachmentId))
            .replace('${' + 'accountTransactionId' + '}', String(accountTransactionId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined' +
                'when calling accountTransactionWaterMark.');
        }
        // verify required parameter 'accountTransactionId' is not null or undefined
        if (accountTransactionId === null || accountTransactionId === undefined) {
            throw new Error('Required parameter accountTransactionId was null or undefined' +
                'when calling accountTransactionWaterMark.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    return AccountTransactionApi;
}());
AccountTransactionApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.ACCOUNTING_BASE_PATH)),
    __metadata("design:paramtypes", [http_1.Http, String])
], AccountTransactionApi);
exports.AccountTransactionApi = AccountTransactionApi;
//# sourceMappingURL=data:application/json;base64,