/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var variables_1 = require("../variables");
require("rxjs/Rx");
/* tslint:disable:no-unused-variable member-ordering */
var AccountTransLineItemApi = (function () {
    function AccountTransLineItemApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     *
     *
     * @param bankaccountid
     * @param accountTransactionType
     * @param keyword
     * @param startDate
     * @param endDate
     * @param tagidIds
     * @param pageIndex
     * @param pageSize
     * @param carryForwardStatus
     */
    AccountTransLineItemApi.prototype.accountTransLineItemAccountContrastExport = function (bankaccountid, accountTransactionType, keyword, startDate, endDate, tagidIds, pageIndex, pageSize, carryForwardStatus, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction_line_item/export';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (bankaccountid !== undefined) {
            queryParameters.set('bankaccountid', String(bankaccountid));
        }
        if (accountTransactionType !== undefined) {
            queryParameters.set('accountTransactionType', String(accountTransactionType));
        }
        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }
        if (startDate !== undefined) {
            queryParameters.set('startDate', String(startDate));
        }
        if (endDate !== undefined) {
            queryParameters.set('endDate', String(endDate));
        }
        if (tagidIds !== undefined) {
            queryParameters.set('tagidIds', String(tagidIds));
        }
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }
        if (carryForwardStatus !== undefined) {
            queryParameters.set('carryForwardStatus', String(carryForwardStatus));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 根据id 删除交易明细记录
     *
     * @param accountTransId
     * @param id
     */
    AccountTransLineItemApi.prototype.accountTransLineItemDelete = function (accountTransId, id, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction_line_item/${accountTransId}/${id}'
            .replace('${' + 'accountTransId' + '}', String(accountTransId))
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'accountTransId' is not null or undefined
        if (accountTransId === null || accountTransId === undefined) {
            throw new Error('Required parameter accountTransId was null or undefined' +
                'when calling accountTransLineItemDelete.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
                'when calling accountTransLineItemDelete.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 分页获取交易记录
     *
     * @param bankaccountid 银行账户Id
     * @param accountTransactionType 交易类型：0、全部；1、收入；2、支出
     * @param keyword 关键字
     * @param startDate 开始时间
     * @param endDate 结束时间
     * @param tagIds
     * @param pageIndex 页数索引
     * @param pageSize 页数大小
     * @param carryForwardStatus 结转状态：0、全部或者空；1、未结转；2、已结转
     */
    AccountTransLineItemApi.prototype.accountTransLineItemSearch = function (bankaccountid, accountTransactionType, keyword, startDate, endDate, tagIds, pageIndex, pageSize, carryForwardStatus, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/account_transaction_line_item/search';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (bankaccountid !== undefined) {
            queryParameters.set('bankaccountid', String(bankaccountid));
        }
        if (accountTransactionType !== undefined) {
            queryParameters.set('accountTransactionType', String(accountTransactionType));
        }
        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }
        if (startDate !== undefined) {
            queryParameters.set('startDate', String(startDate));
        }
        if (endDate !== undefined) {
            queryParameters.set('endDate', String(endDate));
        }
        if (tagIds !== undefined) {
            queryParameters.set('tagIds', String(tagIds));
        }
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }
        if (carryForwardStatus !== undefined) {
            queryParameters.set('carryForwardStatus', String(carryForwardStatus));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    return AccountTransLineItemApi;
}());
AccountTransLineItemApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.ACCOUNTING_BASE_PATH)),
    __metadata("design:paramtypes", [http_1.Http, String])
], AccountTransLineItemApi);
exports.AccountTransLineItemApi = AccountTransLineItemApi;
//# sourceMappingURL=data:application/json;base64,