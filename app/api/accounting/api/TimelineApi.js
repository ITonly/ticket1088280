/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var variables_1 = require("../variables");
require("rxjs/Rx");
/* tslint:disable:no-unused-variable member-ordering */
var TimelineApi = (function () {
    function TimelineApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     * 获取当前公司的单据操作历史信息
     *
     * @param pageIndex
     * @param pageSize
     */
    TimelineApi.prototype.timelineGetByCompanyId = function (pageIndex, pageSize, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/timeLineline/recent';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 获取单个entity的历史信息
     *
     * @param entityId
     * @param pageIndex
     * @param pageSize
     */
    TimelineApi.prototype.timelineGetByEntityId = function (entityId, pageIndex, pageSize, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/timeLineline/${entityId}'
            .replace('${' + 'entityId' + '}', String(entityId));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'entityId' is not null or undefined
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined' +
                'when calling timelineGetByEntityId.');
        }
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    return TimelineApi;
}());
TimelineApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.ACCOUNTING_BASE_PATH)),
    __metadata("design:paramtypes", [http_1.Http, String])
], TimelineApi);
exports.TimelineApi = TimelineApi;
//# sourceMappingURL=data:application/json;base64,