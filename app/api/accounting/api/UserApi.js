/**
 * GuanPlus.Accounting.WebApi
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var variables_1 = require("../variables");
require("rxjs/Rx");
/* tslint:disable:no-unused-variable member-ordering */
var UserApi = (function () {
    function UserApi(http, basePath) {
        this.http = http;
        this.basePath = 'http://guanplus-api-accounting-dev.cn-north-1.eb.amazonaws.com.cn';
        this.defaultHeaders = new http_1.Headers();
        if (basePath) {
            this.basePath = basePath;
        }
    }
    /**
     * 根据id删除用户
     *
     * @param id
     */
    UserApi.prototype.userDelete = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
                'when calling userDelete.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Delete,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 根据id获取用户
     *
     * @param id
     */
    UserApi.prototype.userGet = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined' +
                'when calling userGet.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 获取所有用户
     *
     */
    UserApi.prototype.userGetAll = function (extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user/all';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 邀请用户
     *
     * @param model
     */
    UserApi.prototype.userInvite = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user/invite';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
                'when calling userInvite.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Post,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 分页获取用户
     *
     * @param keyword
     * @param pageIndex 页数索引
     * @param pageSize 页数大小
     */
    UserApi.prototype.userSearch = function (keyword, pageIndex, pageSize, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user/search';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        if (keyword !== undefined) {
            queryParameters.set('keyword', String(keyword));
        }
        if (pageIndex !== undefined) {
            queryParameters.set('pageIndex', String(pageIndex));
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 更新用户信息
     *
     * @param model
     */
    UserApi.prototype.userUpdate = function (model, extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        // verify required parameter 'model' is not null or undefined
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined' +
                'when calling userUpdate.');
        }
        var requestOptions = {
            method: http_1.RequestMethod.Put,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(model);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * 更新usercompany里的name(code position)
     *
     */
    UserApi.prototype.userUpdateUserCompany = function (extraHttpRequestParams) {
        var path = this.basePath + '/api/v1/user/update_user_company';
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.defaultHeaders;
        var requestOptions = {
            method: http_1.RequestMethod.Get,
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    return UserApi;
}());
UserApi = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.ACCOUNTING_BASE_PATH)),
    __metadata("design:paramtypes", [http_1.Http, String])
], UserApi);
exports.UserApi = UserApi;
//# sourceMappingURL=data:application/json;base64,