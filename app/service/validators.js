var core_1 = require("@angular/core");
var Validators = (function () {
    function Validators() {
    }
    Validators.amountValidator = function (value) {
        if (value < 0) {
            return true;
        }
        else {
            return false;
        }
    };
    Validators.phoneOrEmailValidator = function (value) {
        var regPhone = /^1\d{10}$/;
        var regEmail = /^\S+@\S+\.\S+$/;
        /*control.value = trimstring;*/
        if (!(value.match(regPhone) || value.match(regEmail))) {
            return true;
        }
        else {
            return false;
        }
    };
    Validators.hasLetterValidator = function (value) {
        var letter = new RegExp('[A-Za-z]');
        if (!letter.test(value)) {
            return true;
        }
        else {
            return false;
        }
    };
    Validators.hasUpLetterValidator = function (value) {
        var letter = new RegExp('[A-Z]');
        if (letter.test(value)) {
            return false;
        }
        else {
            return true;
        }
    };
    Validators.hasLowLetterValidator = function (value) {
        var letter = new RegExp('[a-z]');
        if (letter.test(value)) {
            return false;
        }
        else {
            return true;
        }
    };
    Validators.hasNumberValidator = function (value) {
        var numericRegEx = new RegExp('[0-9]');
        if (!numericRegEx.test(value)) {
            return true;
        }
        else {
            return false;
        }
    };
    Validators.shortValidator = function (value) {
        if (value.length < 8 || value.length > 64) {
            return true;
        }
        else {
            return false;
        }
    };
    Validators.illegalCharValidator = function (value) {
        var legalChar = /^[A-Za-z0-9_\d$@!%*#?&]+$/;
        if (!value.match(legalChar)) {
            return true;
        }
        else {
            return false;
        }
    };
    Validators.matchingPasswords = function (passwordKey, confirmPasswordKey) {
    };
    Validators.required = function (value) {
        return !(isBlank(value) || (isString(value) && value === ''));
    };
    Validators.minLength = function (minLength, value) {
        var length = typeof value === 'string' ? value.length : 0;
        return length < minLength;
    };
    Validators.maxLength = function (maxLength, value) {
        var length = typeof value === 'string' ? value.length : 0;
        return length > maxLength;
    };
    Validators.pattern = function (pattern, value) {
        var regex = new RegExp("^" + pattern + "$");
        return regex.test(value);
    };
    return Validators;
}());
Validators = __decorate([
    core_1.Injectable()
], Validators);
exports.Validators = Validators;
function isBlank(obj) {
    return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isString(obj) {
    return typeof obj === 'string';
}
exports.isString = isString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQThDO0FBRzlDLElBQWEsVUFBVTtJQUF2QjtJQXdGQSxDQUFDO0lBdkZVLDBCQUFlLEdBQXRCLFVBQXVCLEtBQVU7UUFDN0IsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztJQUNMLENBQUM7SUFDTSxnQ0FBcUIsR0FBNUIsVUFBNkIsS0FBVTtRQUNuQyxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUM7UUFDM0IsSUFBSSxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDaEMsK0JBQStCO1FBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7SUFDTCxDQUFDO0lBQ00sNkJBQWtCLEdBQXpCLFVBQTBCLEtBQVU7UUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztJ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RyxJQUFJLE1BQU0sQ0FBQyxNQUFJLE9BQU8sTUFBRyxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUNMLGlCQUFDO0FBQUQsQ0FBQyxBQXhGRCxJQXdGQztBQXhGWSxVQUFVO0lBRHRCLGlCQUFVLEVBQUU7R0FDQSxVQUFVLENBd0Z0QjtBQXhGWSxnQ0FBVTtBQTBGdkIsaUJBQXdCLEdBQVE7SUFDNUIsTUFBTSxDQUFDLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksQ0FBQztBQUM3QyxDQUFDO0FBRkQsMEJBRUM7QUFFRCxrQkFBeUIsR0FBUTtJQUM3QixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDO0FBQ25DLENBQUM7QUFGRCw0QkFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSAgICBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRvcnMge1xuICAgIHN0YXRpYyBhbW91bnRWYWxpZGF0b3IodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgcGhvbmVPckVtYWlsVmFsaWRhdG9yKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHJlZ1Bob25lID0gL14xXFxkezEwfSQvO1xuICAgICAgICBsZXQgcmVnRW1haWwgPSAvXlxcUytAXFxTK1xcLlxcUyskLztcbiAgICAgICAgLypjb250cm9sLnZhbHVlID0gdHJpbXN0cmluZzsqL1xuICAgICAgICBpZiAoISh2YWx1ZS5tYXRjaChyZWdQaG9uZSkgfHwgdmFsdWUubWF0Y2gocmVnRW1haWwpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGhhc0xldHRlclZhbGlkYXRvcih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBsZXR0ZXIgPSBuZXcgUmVnRXhwKCdbQS1aYS16XScpO1xuICAgICAgICBpZiAoIWxldHRlci50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGhhc1VwTGV0dGVyVmFsaWRhdG9yKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGxldHRlciA9IG5ldyBSZWdFeHAoJ1tBLVpdJyk7XG4gICAgICAgIGlmIChsZXR0ZXIudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBoYXNMb3dMZXR0ZXJWYWxpZGF0b3IodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgbGV0dGVyID0gbmV3IFJlZ0V4cCgnW2Etel0nKTtcbiAgICAgICAgaWYgKGxldHRlci50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGhhc051bWJlclZhbGlkYXRvcih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBudW1lcmljUmVnRXggPSBuZXcgUmVnRXhwKCdbMC05XScpO1xuICAgICAgICBpZiAoIW51bWVyaWNSZWdFeC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHNob3J0VmFsaWRhdG9yKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8IDggfHwgdmFsdWUubGVuZ3RoID4gNjQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBpbGxlZ2FsQ2hhclZhbGlkYXRvcih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBsZWdhbENoYXIgPSAvXltBLVphLXowLTlfXFxkJEAhJSojPyZdKyQvO1xuICAgICAgICBpZiAoIXZhbHVlLm1hdGNoKGxlZ2FsQ2hhcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIG1hdGNoaW5nUGFzc3dvcmRzKHBhc3N3b3JkS2V5OiBzdHJpbmcsIGNvbmZpcm1QYXNzd29yZEtleTogc3RyaW5nKSB7XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgcmVxdWlyZWQodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIShpc0JsYW5rKHZhbHVlKSB8fCAoaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlID09PSAnJykpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtaW5MZW5ndGgobWluTGVuZ3RoOiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlLmxlbmd0aCA6IDA7XG4gICAgICAgIHJldHVybiBsZW5ndGggPCBtaW5MZW5ndGg7XG4gICAgfVxuXG4gICAgc3RhdGljIG1heExlbmd0aChtYXhMZW5ndGg6IG51bWJlciwgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUubGVuZ3RoIDogMDtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA+IG1heExlbmd0aDtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGF0dGVybihwYXR0ZXJuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7cGF0dGVybn0kYCk7XG4gICAgICAgIHJldHVybiByZWdleC50ZXN0KHZhbHVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JsYW5rKG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKG9iajogYW55KTogb2JqIGlzIHN0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnO1xufVxuIl19