var _ = require("lodash");
var http_1 = require("@angular/http");
var Observable_1 = require("rxjs/Observable");
var GPXSRFStrategy = (function (_super) {
    __extends(GPXSRFStrategy, _super);
    function GPXSRFStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GPXSRFStrategy.prototype.configureRequest = function (_req) {
        // noop
        console.log('XSRFStrategy');
    };
    return GPXSRFStrategy;
}(http_1.XSRFStrategy));
exports.GPXSRFStrategy = GPXSRFStrategy;
var HttpBaseService = (function (_super) {
    __extends(HttpBaseService, _super);
    function HttpBaseService(backend, defaultOptions, _router, storageService, loaderService) {
        var _this = _super.call(this, backend, defaultOptions) || this;
        _this._router = _router;
        _this.storageService = storageService;
        _this.loaderService = loaderService;
        return _this;
    }
    HttpBaseService.prototype.request = function (url, options) {
        this.loaderService.show();
        return this.intercept(_super.prototype.request.call(this, url, this.getRequestOptionArgs(options, url)).share());
    };
    HttpBaseService.prototype.get = function (url, options) {
        this.loaderService.show();
        return this.intercept(_super.prototype.get.call(this, url, options).share());
    };
    HttpBaseService.prototype.post = function (url, body, options) {
        this.loaderService.show();
        return this.intercept(_super.prototype.post.call(this, url, body, this.getRequestOptionArgs(options)).share());
    };
    HttpBaseService.prototype.put = function (url, body, options) {
        this.loaderService.show();
        return this.intercept(_super.prototype.put.call(this, url, body, this.getRequestOptionArgs(options)).share());
    };
    HttpBaseService.prototype.delete = function (url, options) {
        this.loaderService.show();
        return this.intercept(_super.prototype.delete.call(this, url, options).share());
    };
    HttpBaseService.prototype.getRequestOptionArgs = function (options, url) {
        if (options == null) {
            options = new http_1.RequestOptions();
        }
        if (options.headers == null) {
            options.headers = new http_1.Headers();
        }
        // Set Accept Json for Firefox
        options.headers.set('Accept', 'application/json');
        if (_.endsWith(url, 'token')) {
            return options;
        }
        options.headers.set('Content-Type', 'application/json');
        var token = this.storageService.getToken();
        if (token && token.access_token && !_.endsWith(url, 'register')
            && !_.endsWith(url, 'forget_password')) {
            options.headers.set('Authorization', 'bearer ' + token.access_token);
            if (token.user && token.user.currentCompany && token.user.currentCompany.id) {
                options.headers.set('company_id', token.user.currentCompany.id);
            }
        }
        return options;
    };
    HttpBaseService.prototype.intercept = function (observable) {
        var _this = this;
        observable.subscribe(function (res) { return _this.loaderService.hide(); }, function (error) { return _this.loaderService.hide(); });
        return observable.catch(function (err, source) {
            _this.loaderService.hide();
            if (err.status === 401 && !_.endsWith(err.url, 'token')) {
                _this._router.navigate(['/login']);
                return Observable_1.Observable.empty();
            }
            else {
                return Observable_1.Observable.throw(err);
            }
        });
    };
    return HttpBaseService;
}(http_1.Http));
exports.HttpBaseService = HttpBaseService;
//# sourceMappingURL=data:application/json;base64,